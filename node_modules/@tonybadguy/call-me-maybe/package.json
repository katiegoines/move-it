{
  "_args": [
    [
      {
        "raw": "@tonybadguy/call-me-maybe@^2.0.1",
        "scope": "@tonybadguy",
        "escapedName": "@tonybadguy%2fcall-me-maybe",
        "name": "@tonybadguy/call-me-maybe",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/Users/katiegoines/OneDrive/GA/WDI_51/w12/move-it/node_modules/yelp-fusion"
    ]
  ],
  "_from": "@tonybadguy/call-me-maybe@>=2.0.1 <3.0.0",
  "_id": "@tonybadguy/call-me-maybe@2.0.1",
  "_inCache": true,
  "_location": "/@tonybadguy/call-me-maybe",
  "_nodeVersion": "4.6.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/call-me-maybe-2.0.1.tgz_1479082043381_0.9114223527722061"
  },
  "_npmUser": {
    "name": "tonybadguy",
    "email": "tonybadguy+npm@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@tonybadguy/call-me-maybe@^2.0.1",
    "scope": "@tonybadguy",
    "escapedName": "@tonybadguy%2fcall-me-maybe",
    "name": "@tonybadguy/call-me-maybe",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/yelp-fusion"
  ],
  "_resolved": "https://registry.npmjs.org/@tonybadguy/call-me-maybe/-/call-me-maybe-2.0.1.tgz",
  "_shasum": "233267eb0a1625c2f5954f27af364b4a29c6e344",
  "_shrinkwrap": null,
  "_spec": "@tonybadguy/call-me-maybe@^2.0.1",
  "_where": "/Users/katiegoines/OneDrive/GA/WDI_51/w12/move-it/node_modules/yelp-fusion",
  "author": {
    "name": "Tony Liu"
  },
  "bugs": {
    "url": "https://github.com/tonybadguy/call-me-maybe/issues"
  },
  "dependencies": {
    "caseless": "^0.11.0",
    "error": "^7.0.2",
    "small-request": "^2.0.2",
    "string-template": "^1.0.0"
  },
  "description": "A Node.js module for creating REST clients with easy request model templating and straightforward extensibility",
  "devDependencies": {
    "proxyquire": "^1.7.10",
    "sinon": "^1.17.6",
    "tap": "^8.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "233267eb0a1625c2f5954f27af364b4a29c6e344",
    "tarball": "https://registry.npmjs.org/@tonybadguy/call-me-maybe/-/call-me-maybe-2.0.1.tgz"
  },
  "gitHead": "3351fcfd11b90c1c557ea5dd547f227d5dd93d97",
  "homepage": "https://github.com/tonybadguy/call-me-maybe#readme",
  "keywords": [
    "REST",
    "template",
    "promise",
    "request",
    "http",
    "https",
    "callmemaybe"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "tonybadguy",
      "email": "tonybadguy+npm@gmail.com"
    }
  ],
  "name": "@tonybadguy/call-me-maybe",
  "nyc": {
    "exclude": [
      "lib/*.test.*js",
      "lib/*/*.test.*js"
    ]
  },
  "optionalDependencies": {},
  "readme": "# @tonybadguy/call-me-maybe\n\n[![npm version](https://badge.fury.io/js/%40tonybadguy%2Fcall-me-maybe.svg)](https://badge.fury.io/js/%40tonybadguy%2Fcall-me-maybe) [![Build Status](https://travis-ci.org/tonybadguy/call-me-maybe.svg?branch=master)](https://travis-ci.org/tonybadguy/call-me-maybe) [![codecov](https://codecov.io/gh/tonybadguy/call-me-maybe/branch/master/graph/badge.svg)](https://codecov.io/gh/tonybadguy/call-me-maybe) [![bitHound Overall Score](https://www.bithound.io/github/tonybadguy/call-me-maybe/badges/score.svg)](https://www.bithound.io/github/tonybadguy/call-me-maybe)\n\nA Node.js module for creating REST clients with easy request model templating and straightforward extensibility\n\n### A simple GET request :+1:\n```javascript\nconst send = require('@tonybadguy/call-me-maybe');\n\nsend({\n  url: 'https://httpbin.org/get'\n}).then(response => {\n  console.log(response.statusCode);\n  console.log(response.body);\n  console.log(response.headers);\n  console.log(response.jsonBody.origin);\n}).catch(error => {\n  console.log(error);\n});\n```\n\n### POST with body :sparkling_heart:\n```javascript\nsend({\n  url: 'https://httpbin.org/post',\n  method: 'POST',\n  body: 'my data'\n}).then(response => {\n  console.log(response.body);\n  console.log(response.jsonBody.data); // 'my data'\n});\n```\n\n### POST with object as json body :sparkles::sparkling_heart::sparkles:\n```javascript\nsend({\n  url: 'https://httpbin.org/post',\n  method: 'POST',\n  jsonBody: {\n    foo: 'bar'\n  }\n}).then(response => {\n  console.log(response.body);\n  console.log(response.jsonBody.json.foo); // 'bar'\n});\n```\n\n```Content-Type``` header is automatically set to ```application/json```.\n\n### POST with object as urlencoded body :sparkles::scream::sparkles:\n```javascript\nsend({\n  url: 'https://httpbin.org/post',\n  method: 'POST',\n  urlencodedBody: {\n    foo: 'bar'\n  }\n}).then(response => {\n  console.log(response.jsonBody.form.foo); // 'bar'\n});\n```\n```Content-Type``` header is automatically set to ```application/x-www-form-urlencoded```.\n\n### Make it fancy with urlParams :sparkles::sparkling_heart::scream::sparkling_heart::sparkles:\n```javascript\nsend({\n  url: 'https://httpbin.org/{foo}',  // 'https://httpbin.org/get'\n  urlParams:{\n    foo:'get'\n  }\n}).then(response => {\n  console.log(response.body);\n});\n```\n\n### Or with a query :hand::dollar::dollar::dollar:\n```javascript\nsend({\n  url: 'https://httpbin.org/get',  // 'https://httpbin.org/get?foo=bar%20baz'\n  query:{\n    foo:'bar baz'\n  }\n}).then(response => {\n  console.log(response.body);\n});\n```\n\n### Set headers :collision::dizzy_face::collision:\n```javascript\nsend({\n  url: 'https://httpbin.org/get',\n  headers:{\n    'x-my-header':'oh hai'\n  }\n}).then(response => {\n  console.log(response.body);\n});\n```\n\n### Set bearer token authorization header :collision::revolving_hearts::dizzy_face::revolving_hearts::collision:\nThis is a shortcut for setting the Authorization header.\n\n```javascript\nsend({\n  url: 'https://httpbin.org/get',\n  bearerToken: 'mytoken'\n}).then(response => {\n  console.log(response.body);\n});\n```\n\n```Authorization``` header is set to ```Bearer mytoken```.\n\n### Handle non-200 status :fire::poop::fire::ok_hand:\n```javascript\nsend({\n  url: 'https://httpbin.org/status/500'\n}).then(response => {\n  // won't be called\n}).catch(error => {\n  console.log(error.response.statusCode); // 500\n});\n```\n\n## All features above are enabled by default\n\n* They are implemented using pluggable filter modules on request / response\n* You can customize which filters to use via optional params of the send() function\n* You can write your own filters\n\n### Advanced: Overriding default filters :rocket:\n```javascript\n'use strict';\n\nconst send = require('@tonybadguy/call-me-maybe');\nconst jsonBodyFilter = require('@tonybadguy/call-me-maybe/lib/response-filters/json-body');\n\nconst request = {\n  url: 'https://httpbin.org/get'\n};\n\nconst requestFilters = []; // don't use any of the default request filters\nconst responseFilters = [jsonBodyFilter]; // only use the json body filter\n\nsend(request, requestFilters, responseFilters).then(response => {\n  console.log(response);\n});\n```\n\n### Advanced: Example custom request filter :rocket::rocket:\n```javascript\n'use strict';\n\n// a filter that always sets the request body to 'hello world!'\nmodule.exports = {\n  filter: (request) => {\n    request.body = 'hello world!';\n  \n    return request;\n  }\n};\n```\n\n### Advanced: Custom response filters are exactly the same :rocket::rocket:\n```javascript\n'use strict';\n\n// a filter that always sets the response body to 'hello world!'\nmodule.exports = {\n  filter: (response) => {\n    response.body = 'hello world!';\n  \n    return request;\n  }\n};\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tonybadguy/call-me-maybe.git"
  },
  "scripts": {
    "cover": "tap --coverage-report=lcov",
    "test": "tap ./lib/*/*.test.*js ./lib/*.test.*js --coverage"
  },
  "version": "2.0.1"
}
